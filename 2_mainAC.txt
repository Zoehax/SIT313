using Android.App;
using Android.Content;
using Android.Locations;
using Android.OS;
using Android.Runtime;
using Android.Support.V7.App;
using Android.Widget;
using Newtonsoft.Json;
using Square.Picasso;
using System;//关于这个的引用并不确定
using Weather_APP.Model;

/*因为是从视频上学习的，由于版本不一样，所以很多东西都不一样，也有些自己改的东西*/

namespace Weather_APP
{
    [Activity(Label = "@string/app_name", Theme = "@style/AppTheme", MainLauncher = true)]
    public class MainActivity : AppCompatActivity, ILocationListener
    {
        TextView txtCity, txtLastUpdate, txtDescription, txtHumidity, txtTime, txtCelsius;
        ImageView imageView;

        LocationManager locationManager;
        string provider;
        static double lat, lon;//我和他设的不一样，他的是lng
        OpenWeatherMap openWeatherMap = new OpenWeatherMap();
        protected override void OnCreate(Bundle savedInstanceState)//括号不一样,但是不重要，只是命名问题而已
        {
            base.OnCreate(savedInstanceState);//同上

            // Set our view from the "main" layout resource
            SetContentView(Resource.Layout.activity_main);//Main 我不能改

            locationManager =(LocationManager)GetSystemService(Context.LocationService);
            provider = locationManager.GetBestProvider(new Criteria(), false);

            Location location = locationManager.GetLastKnownLocation(provider);
            if (location == null)
                System.Diagnostics.Debug.WriteLine("No location");
            
        }

        protected override void OnResume()
        {
            base.OnResume();
            locationManager.RequestLocationUpdates(provider,400,1,this);//这里的er存在问题，改天再说吧
            //down机 假的吧
        }

        protected override void OnPause()
        {
            base.OnPause();
            locationManager.RemoveUpdates(this);
        }

        public void OnLocationChanged(Location location)
        {
            lat = Math.Round(location.Latitude, 4);
            lon = Math.Round(location.Longitude, 4);

            new GetWeather(this.openWeatherMap).Execute(Common.Common.APIRequest(lat.ToString(), lon.ToString()));
        }

        public void OnProviderDisabled(string provider)
        {
            
        }

        public void OnProviderEnabled(string provider)
        {
            
        }

        public void OnStatusChanged(string provider, [GeneratedEnum] Availability status, Bundle extras)
        {
           
        }

        private class GetWeather : AsyncTask<String, Java.Lang.Void, String>
        {
            private ProgressDialog pd = new ProgressDialog(Application.Context);//这个目前还没有解决
            private MainActivity activity;//我的这个也不一样，一定要镶嵌
            OpenWeatherMap openWeatherMap;

            //public OpenWeatherMap JsonConvert { get; private set; }

            // private OpenWeatherMap JsonConvert;

            public GetWeather(MainActivity activity, OpenWeatherMap openWeatherMap) {
                this.activity = activity;
                this.openWeatherMap = openWeatherMap;
            }

            public GetWeather(OpenWeatherMap openWeatherMap)
            {
                this.openWeatherMap = openWeatherMap;
            }

            protected override void OnPreExecute()
            {
                base.OnPreExecute();
                pd.Window.SetType(Android.Views.WindowManagerTypes.SystemAlert);
                pd.SetTitle("Please wait... ...");
                pd.Show();
            }
            protected override string RunInBackground(params string[] @params)
            {
                string stream = null;
                string urlString = @params[0];

                //urlString=Common.Common.APIRequest(lat.ToString(),lon.ToString())
                Helper.Helper http = new Helper.Helper();
                stream = http.GetHTTPDate(urlString);//他多打了一个括号
                return stream;
            }

            protected override void OnPostExecute(string result)
            {
                base.OnPostExecute(result);
                if (result.Contains("Error: Not found city")) {
                    pd.Dismiss();
                    return;
                }
                openWeatherMap = JsonConvert.DeserializeObject<OpenWeatherMap>(result);
                pd.Dismiss();

                activity.txtCity = activity.FindViewById<TextView>(Resource.Id.txtCity);
                activity.txtLastUpdate = activity.FindViewById<TextView>(Resource.Id.txtLastUpdate);
                activity.txtDescription = activity.FindViewById<TextView>(Resource.Id.txtDescription);
                activity.txtHumidity = activity.FindViewById<TextView>(Resource.Id.txtHumidity);
                activity.txtTime = activity.FindViewById<TextView>(Resource.Id.txtTime);
                activity.txtCelsius = activity.FindViewById<TextView>(Resource.Id.txtCelsius);
                
                activity.imageView = activity.FindViewById<ImageView>(Resource.Id.imageView);
                //24:24

                activity.txtCity.Text = $"{openWeatherMap.name},{openWeatherMap.sys.country}";
                activity.txtLastUpdate.Text = $"Last Updated: {DateTime.Now.ToString("dd MMMMM yyyy HH:mm")}";
                activity.txtDescription.Text = $"{openWeatherMap.weather[0].description}";
                activity.txtHumidity.Text = $"Humidity: {openWeatherMap.main.humidity} %";
                activity.txtTime.Text = $"{Common.Common.UnixTimeStampToDateTime(openWeatherMap.sys.sunrise)}/{Common.Common.UnixTimeStampToDateTime(openWeatherMap.sys.sunset)}";
                activity.txtCelsius.Text = $"{openWeatherMap.main.temp}°C ";

                if (!String.IsNullOrEmpty(openWeatherMap.weather[0].icon)) {
                    Picasso.With(activity.ApplicationContext).Load(Common.Common.GetImage(openWeatherMap.weather[0].icon))
                        .Into(activity.imageView);
                }

            }
        }
    }
}

